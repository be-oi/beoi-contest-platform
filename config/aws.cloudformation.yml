AWSTemplateFormatVersion: '2010-09-09'
Description: The full contest platform AWS stack
Parameters:
  DBPassword:
    NoEcho: true
    Description: The database admin account password
    Type: String
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters and have a length between 8 and 41.
  EC2KeyName:
    Description: The SSH Key used to connect to EC2 hosts
    Type: String
    Default: EB-EC2-Key
  DefaultNotifiedEmail:
    Description: The email address of the initial person registered in SNS (other may be added later)
    Type: String
  DatadogAPIKey:
    NoEcho: true
    Description: The datadog API key to push monitoring
    Type: String
  CloudfrontSSLCertificateARN: # Must be created separately as currently CloudFront certificate must be in us-east-1
    Description: The ACM certificate ARN to be used for CloudFront 
    Type: String 

Resources:

  # ======== DynamoDB Tables ========

  TeamTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: team
      AttributeDefinitions:
        - { AttributeName: ID, AttributeType: N }
        - { AttributeName: password, AttributeType: S }
      KeySchema:
        - { AttributeName: ID, KeyType: HASH }
      GlobalSecondaryIndexes:
        - IndexName: password_index
          KeySchema: 
          - { AttributeName: password, KeyType: HASH }
          Projection: { ProjectionType: ALL }
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  TeamQuestionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: team_question
      AttributeDefinitions:
        - { AttributeName: teamID, AttributeType: N }
        - { AttributeName: questionID, AttributeType: N }
      KeySchema:
        - { AttributeName: teamID, KeyType: HASH }
        - { AttributeName: questionID, KeyType: RANGE }
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  SessionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: sessions
      AttributeDefinitions:
        - { AttributeName: id, AttributeType: S }
      KeySchema:
        - { AttributeName: id, KeyType: HASH }
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # ======== S3 Buckets ========

  ContestBucket:
    Type: "AWS::S3::Bucket"
    Properties: 
      BucketName: !Sub "contest-platform-contests-${AWS::Region}-${AWS::AccountId}"
      AccessControl: PublicRead
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: [ "*" ]
            AllowedMethods: [ "GET" ]
            AllowedOrigins: [ "*" ]
            MaxAge: "3000"

  LogBucket:
    Type: "AWS::S3::Bucket"
    Properties: 
      BucketName: !Sub "contest-platform-logs-${AWS::Region}-${AWS::AccountId}"
      AccessControl: LogDeliveryWrite
  LogBucketPolicy:  # To let Beanstalk's load balancer write its logs in the "ELB" prefix 
    Type: "AWS::S3::BucketPolicy"
    Properties: 
      Bucket: !Ref LogBucket
      PolicyDocument: 
        Statement: 
          - Action: [ "s3:PutObject" ]
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${LogBucket}/ELB/*"
            Principal: { AWS: [ "054676820928" ] }

  # ======== CloudFront CDN ========

  ContestCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub "${ContestBucket}.s3.amazonaws.com"
          Id: contestbucket
          S3OriginConfig: { OriginAccessIdentity: "" }
        Enabled: 'true'
        DefaultRootObject: index.html
        Logging:
          IncludeCookies: 'false'
          Bucket: !Sub "${LogBucket}.s3.amazonaws.com"
          Prefix: cloudfront/contest
        Aliases:
        - manage-static.be-oi.be
        DefaultCacheBehavior:
          AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
          CachedMethods: [HEAD, GET]
          TargetOriginId: contestbucket
          Compress: true
          ForwardedValues:
            Headers: ["Access-Control-Request-Headers", "Access-Control-Request-Method", Origin]
            QueryString: 'true'
            Cookies: { Forward: none }
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
        ViewerCertificate:
          SslSupportMethod: "sni-only"
          AcmCertificateArn: !Ref CloudfrontSSLCertificateARN


  # ======== Database ========

  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: contestplaform
      AllocatedStorage: 5
      DBInstanceClass: db.t2.micro
      MultiAZ: false
      Engine: mysql
      EngineVersion: 5.7.11
      MasterUsername: dbuser
      MasterUserPassword: !Ref DBPassword
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 5
      DBInstanceIdentifier: PoinguardDB
      PreferredBackupWindow: 04:00-05:00
      PreferredMaintenanceWindow: Mon:03:00-Mon:04:00
      PubliclyAccessible: false
      VPCSecurityGroups: [ !GetAtt DBSecurityGroup.GroupId ]

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow the DB to get connection from the EB machines
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !GetAtt EBEC2SecurityGroup.GroupId

  # ======== Resources for EB ========
  
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "*.be-oi.be"

  EBEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: PublishLogOnS3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::elasticbeanstalk-${AWS::Region}-${AWS::AccountId}/resources/environments/logs/*"
          - Effect: Allow
            Action: [ "s3:PutObject", "s3:DeleteObject" ]
            Resource: !Sub "arn:aws:s3:::${ContestBucket}/*" 
          - Effect: Allow
            Action: "s3:ListObjects"
            Resource: !Sub "arn:aws:s3:::${ContestBucket}" 
          - Effect: Allow
            Action:
            - "dynamodb:BatchGetItem"
            - "dynamodb:BatchWriteItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:DescribeTable"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:UpdateItem"
            Resource:
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TeamTable}"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TeamTable}/index/*"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TeamQuestionTable}"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SessionTable}"

  EBEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref EBEC2Role

  EBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: EB EC2 Security Group

  # ======== EB ========

  Application:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: contest-platform

  ProductionConfTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref Application
      SolutionStackName: 64bit Amazon Linux 2016.03 v2.1.6 running Docker 1.11.2
      OptionSettings:
        # List of settings:
        # http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html
        # (let's try to keep the same order)

      - Namespace: aws:autoscaling:asg
        OptionName: Availability Zones
        Value: Any 2
      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: 1
      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: 10
      - Namespace: aws:autoscaling:asg
        OptionName: Cooldown
        Value: 360

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref EBEC2InstanceProfile
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value: !Ref EC2KeyName
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: InstanceType
        Value: t2.micro
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: MonitoringInterval
        Value: 1 minute
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SecurityGroups
        Value: !Ref EBEC2SecurityGroup

      - Namespace: aws:autoscaling:trigger
        OptionName: MeasureName
        Value: CPUUtilization
      - Namespace: aws:autoscaling:trigger
        OptionName: Unit
        Value: Percent
      - Namespace: aws:autoscaling:trigger
        OptionName: LowerThreshold
        Value: 5
      - Namespace: aws:autoscaling:trigger
        OptionName: LowerBreachScaleIncrement
        Value: -1
      - Namespace: aws:autoscaling:trigger
        OptionName: UpperThreshold
        Value: 90
      - Namespace: aws:autoscaling:trigger
        OptionName: UpperBreachScaleIncrement
        Value: 1
      - Namespace: aws:autoscaling:trigger
        OptionName: Period
        Value: 3
      - Namespace: aws:autoscaling:trigger
        OptionName: BreachDuration
        Value: 5
        
      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateType
        Value: Health
      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: MinInstancesInService
        Value: 1
      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateEnabled
        Value: true
      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: MaxBatchSize
        Value: 1
      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: Timeout
        Value: PT15M

      - Namespace: aws:elasticbeanstalk:application
        OptionName: Application Healthcheck URL
        Value: HTTPS:443/contestInterface/index.php

      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DATABASE_PASSWORD
        Value: !Ref DBPassword
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DATABASE_USER
        Value: dbuser
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DATABASE_NAME
        Value: contestplaform
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DATABASE_HOST
        Value: !GetAtt DB.Endpoint.Address
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_REGION
        Value: !Ref AWS::Region
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_BUCKET
        Value: !Ref ContestBucket
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: DATADOG_API_KEY
        Value: !Ref DatadogAPIKey

      - Namespace: aws:elasticbeanstalk:command
        OptionName: DeploymentPolicy
        Value: Rolling
      - Namespace: aws:elasticbeanstalk:command
        OptionName: Timeout
        Value: 480
      - Namespace: aws:elasticbeanstalk:command
        OptionName: BatchSize
        Value: 1
      - Namespace: aws:elasticbeanstalk:command
        OptionName: BatchSizeType
        Value: Fixed

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: LoadBalancerType
        Value: application

      - Namespace: aws:elasticbeanstalk:environment:process:contestweb
        OptionName: MatcherHTTPCode
        Value: 200

      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: enhanced

      - Namespace: aws:elasticbeanstalk:hostmanager
        OptionName: LogPublicationControl
        Value: true

      - Namespace: aws:elasticbeanstalk:managedactions
        OptionName: ManagedActionsEnabled
        Value: true
      - Namespace: aws:elasticbeanstalk:managedactions
        OptionName: PreferredStartTime
        Value: Mon:05:30

      - Namespace: aws:elasticbeanstalk:managedactions:platformupdate
        OptionName: UpdateLevel
        Value: minor
      - Namespace: aws:elasticbeanstalk:managedactions:platformupdate
        OptionName: InstanceRefreshEnabled
        Value: true

      - Namespace: aws:elasticbeanstalk:monitoring
        OptionName: Automatically Terminate Unhealthy Instances
        Value: true

      - Namespace: aws:elasticbeanstalk:sns:topics
        OptionName: Notification Endpoint
        Value: !Ref DefaultNotifiedEmail

      - Namespace: aws:elbv2:listener:default
        OptionName: ListenerEnabled
        Value: false

      - Namespace: aws:elbv2:listener:443
        OptionName: DefaultProcess
        Value: contestweb
      - Namespace: aws:elbv2:listener:443
        OptionName: Protocol
        Value: HTTPS
      - Namespace: aws:elbv2:listener:443
        OptionName: SSLCertificateArns
        Value: !Ref SSLCertificate

      - Namespace: aws:elbv2:loadbalancer
        OptionName: AccessLogsS3Bucket
        Value: !Ref LogBucket
      - Namespace: aws:elbv2:loadbalancer
        OptionName: AccessLogsS3Enabled
        Value: true
      - Namespace: aws:elbv2:loadbalancer
        OptionName: AccessLogsS3Prefix
        Value: ELB
